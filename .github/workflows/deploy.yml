name: Build test and deploy to package repository
env:
  TZ: 'America/New_York'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
on:
  push:
    branches:
      - main
      - release
      - feature/*
      - hotfix/*
      - dalexander/*
  pull_request:
    branches:
      - main
  release:
    types: [ published ]
    branches:
      - main

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.8", "3.9",  "3.10" ]
    steps:
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Docker Compose services
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: alpha
          POSTGRES_PASSWORD: alphapassword
          POSTGRES_VERSION: 13
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          MYSQL_DATABASE: testdb
          MYSQL_USER: alpha
          MYSQL_PASSWORD: alphapassword
          MYSQL_ROOT_PASSWORD: alphapassword
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MARIADB_DATABASE: testdb
          MARIADB_USER: alpha
          MARIADB_PASSWORD: alphapassword
          MARIADB_ROOT_PASSWORD: alphapassword
          MARIADB_HOST: 127.0.0.1
          MARIADB_PORT: 3307
        run: |
          printf """
          LOG_LEVEL="DEBUG"
          MARIADB_DATABASE=$MARIADB_DATABASE
          MARIADB_USER=$MARIADB_USER
          MARIADB_PASSWORD=$MARIADB_PASSWORD
          MARIADB_ROOT_PASSWORD=$MARIADB_ROOT_PASSWORD
          MARIADB_ROOT_PASSWORD_HASH=""
          MARIADB_HOST=$MARIADB_HOST
          MARIADB_PORT=$MARIADB_PORT
          # ##########################################################
          MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
          MYSQL_DATABASE=$MYSQL_DATABASE
          MYSQL_USER=$MYSQL_USER
          MYSQL_PASSWORD=$MYSQL_PASSWORD
          MYSQL_ALLOW_EMPTY_PASSWORD=no
          MYSQL_RANDOM_ROOT_PASSWORD=no
          MYSQL_ONETIME_PASSWORD=no
          MYSQL_INITDB_SKIP_TZINFO=no
          MYSQL_HOST=$MYSQL_HOST
          MYSQL_PORT=$MYSQL_PORT
          # ##########################################################
          POSTGRES_DB=$POSTGRES_DB
          POSTGRES_USER=$POSTGRES_USER
          POSTGRES_PASSWORD=$POSTGRES_PASSWORD
          POSTGRES_INITDB_ARGS=
          POSTGRES_INITDB_WALDIR=
          POSTGRES_HOST_AUTH_METHOD=scram-sha-256
          PGDATA=/var/lib/postgresql/data
          POSTGRES_PORT=$POSTGRES_PORT
          POSTGRES_VERSION=$POSTGRES_VERSION
          POSTGRES_HOST=$POSTGRES_HOST
          # ##########################################################
          """ > .env
          docker-compose -p crudrepository up \
          --always-recreate-deps --renew-anon-volumes \
          --remove-orphans --force-recreate -d --build
          sleep 30
          docker ps -a

      # Task for linting with black
      - name: Lint with black
        run: |
          python -m pip install black pytest wheel setuptools build twine
          # Code formatting with black, check every python file in the crud_repository directory 
          black crud_repository
          black --check crud_repository

      # Task for running tests
      - name: Testing with pytest
        run: |
          python -m pip install black pytest wheel setuptools build twine
          if [ -f requirements.txt ]; then pip install  -r requirements.txt ; fi 

          # Run tests
          if python3 -m pytest tests/ 2>&1 ; then
              echo "Testsing completed Successfully."
          else
              echo "Tests failed to complete successfully."
              exit 1
          fi

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9",  "3.10" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build package artifact
        run: |
          python -m pip install --upgrade pip
          python -m pip install black pytest wheel setuptools build twine
          bash deploy.sh
          # Build the package
          if python3 -m build 2>&1 ; then
              echo "Build and test ran Successfully."
          else
              echo "Build failed to complete successfully."
              exit 1
          fi
          ls -l dist

      - name: Upload build artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-artifact@v2
        with:
          name: Build-Results
          path: |
            dist
            crud_repository.egg-info
            README.md
            LICENSE

  publish:
    needs: setup-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'
    # only run if job setup and test passed

    strategy:
      matrix:
        python-version: ["3.8", "3.9",  "3.10" ]
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: Build-Results
          path: ~/dist

      - name: Publish to PyPI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          printf """\n
          [pypi]
          username = $TWINE_USERNAME
          password = $TWINE_PASSWORD
          """ > ~/.pypirc
          python3 -m twine upload \
          --config-file ~/.pypirc \
          ~/dist/* --verbose --skip-existing