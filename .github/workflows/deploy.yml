name: Python Package Publishing Pipeline

on:
  push:
    branches:
      - main # Run on push to main branch
  pull_request:
    branches:
      - main # Run on pull request to main branch

env:
  TZ: 'America/New_York'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

jobs:
  setup_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Setup Environment Variables for Database Services
        run: |
          echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
          # Define other required environment variables for database services here...

      - name: Setup Docker Compose Services
        run: docker-compose -f docker-compose.yml up -d --build

      - name: Install Dependencies and Run Tests
        run: |
          /bin/bash deploy.sh -uv --install-dev && wait $!
          /bin/bash deploy.sh --test && wait $!

      - name: Lint with Black
        run: black crud_repository && black --check crud_repository

      - name: Check Test Results
        run: |
          TEST_RESULTS=$(echo "::set-output name=test_results::$(find . -name 'test_results.xml')"
          echo "$TEST_RESULTS")
          if [[ -z "$TEST_RESULTS" ]]; then
            echo "Error: Test results not found. Exiting..."
            exit 1
          fi


  build_and_publish:
    needs: setup_and_test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]

    if: ${{ steps.setup_and_test.outputs.test_results == 'success' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build Package Artifact
        run: /bin/bash deploy.sh --install-dev --build && wait $!

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Build-Results
          path: |
            dist
            crud_repository.egg-info
            README.md
            LICENSE

      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: Build-Results
          path: dist

      - name: Publish to PyPI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          python -m build --wheel
          twine upload --repository-url https://upload.pypi.org/legacy/ dist/*